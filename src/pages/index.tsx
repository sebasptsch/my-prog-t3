import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";

import { api } from "@/utils/api";
import { SubmitHandler, useForm } from "react-hook-form";
import { useEffect } from "react";

interface FormData {
  title: string;
  content: string;
}

const Home: NextPage = () => {
  const hello = api.example.hello.useQuery({ text: "from tRPC" });
  const { register, handleSubmit } = useForm<FormData>();
  const { data: sessionData } = useSession();

  const context = api.useContext();

  const createNote = api.notes.create.useMutation({
    onSuccess: (data) => {
      context.notes.list.invalidate();
      alert(`function success, note id: ${data.id}`);
    },
  });

  const { data } = api.notes.list.useQuery();

  const onSubmit: SubmitHandler<FormData> = (data) => {
    return createNote.mutateAsync(data);
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div>
          Login
          <button
            className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
            onClick={sessionData ? () => void signOut() : () => void signIn()}
          >
            {sessionData ? "Sign out" : "Sign in"}
          </button>
        </div>
        <div>
          <form
            onSubmit={handleSubmit(onSubmit)}
            className="flex flex-col gap-1"
          >
            <input
              {...register("title")}
              className="border-2 border-black"
              placeholder="Title"
            />
            <textarea
              {...register("content")}
              className="border-2 border-black"
              placeholder="Content"
            />
            <button type="submit">Create a new note</button>
          </form>
        </div>
        <div className="flex flex-col gap-1">
          {data?.map((note) => (
            <Note initialNote={note} key={note.id} />
          ))}
        </div>
      </main>
    </>
  );
};

export default Home;

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.example.getNewMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
    </div>
  );
};

interface NoteProps {
  initialNote: {
    title: string;
    content: string;
    id: string;
  };
}

const Note: React.FC<NoteProps> = ({ initialNote }) => {
  const context = api.useContext();

  const deleteNote = api.notes.delete.useMutation({
    onSuccess: (data) => {
      context.notes.list.invalidate();
      context.notes.getOne.invalidate(initialNote.id);
    },
  });

  const { data: note = initialNote } = api.notes.getOne.useQuery(
    initialNote.id
  );

  const updateNote = api.notes.update.useMutation({
    onSuccess: (data) => {
      context.notes.getOne.invalidate(data.id)
    }
  });

  const { register, handleSubmit, reset, formState } = useForm<FormData>({
    defaultValues: {
      title: initialNote.title,
      content: initialNote.content,
    },
  });

  useEffect(() => {
    reset(note);
  }, [note]);

  const onSubmit: SubmitHandler<FormData> = (data) => {
    return updateNote.mutateAsync({
      id: note.id,
      ...data
    })
  } 

  return (
    <form
      key={note.id}
      className="flex w-1/2 flex-col gap-1 justify-self-center rounded-md border-2 border-solid border-slate-800"
      onSubmit={handleSubmit(onSubmit)}
    >
      <h3 className="slate-800">
        <input {...register("title")} />
      </h3>
      <hr />
      <p>
        <textarea {...register("content")} />
      </p>
      <button
        onClick={() => {
          deleteNote.mutate(note.id);
        }}
      >
        Delete
      </button>
      <button type="submit" disabled={formState.isSubmitting}>
        Save
      </button>
    </form>
  );
};
